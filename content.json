[{"title":"复制","date":"2019-06-20T01:53:03.000Z","path":"2019/06/20/复制/","text":"使用document.execCommand(&quot;Copy&quot;);来实现把复制的内容复制到粘贴板 思路 创建 input 框，value 值为需要复制的内容 使用 getElementById 获取 input 框 调用.select()方法选中 input 框的内容 最后调用 document.execCommand(“Copy”) 实现复制 具体代码html:&lt;input value=&quot;copy的内容&quot; id=&quot;copy&quot; /&gt; js: 1234const urlLink = document.getElementById(\"copy\");urlLink.select();document.execCommand(\"copy\");message.success(\"分享链接已复制成功！\", 1); 遇到的问题及解决方案 如果不想显示input框，可以将input框的opacity属性设置为0，在使用绝对定位使其脱离文档流。注意，不能将input框的display属性设置为none或将visibility设置为hidden，这会导致复制失败 ie之外的浏览器 document.execCommand(“copy”);这个必须在由用户操作触发的点击事件线程中执行，在axios异步的回调函数中执行是不允许的。解决的方案是使用async和await，将异步的操作变为同步即可","tags":[]},{"title":"下载文件到本地","date":"2019-06-19T10:29:31.000Z","path":"2019/06/19/下载文件/","text":"一、HTML5 原生 download 属性实现方法：&lt;a href=&quot;large.jpg&quot; download&gt;下载&lt;/a&gt;缺点： 兼容差，目前只兼容了 Chrome 文件需要是同源的，跨域资源会使 download 属性失效 二、使用 Blob 实现文件下载接口请求设置responseType: blob来使得返参为 blob 类型实现方法： 123456789101112download = (content, filename) =&gt; &#123; const eleLink = document.createElement(\"a\"); eleLink.download = filename; // 文件名 eleLink.style.display = \"none\"; var blob = new Blob([content]); // Blob二进制转换 eleLink.href = URL.createObjectURL(blob); // 二进制路径转换 // 触发点击 document.body.appendChild(eleLink); eleLink.click(); // 然后移除 document.body.removeChild(eleLink);&#125;; 三、生成截图并保存1.主要使用 html2canvas 库和 canvas2img 库。html2canvas(可通过 npm 安装): 文档地址：http://html2canvas.hertzen.com/ github 地址：https://github.com/niklasvh/html2canvas canvas2img(直接 copy 源码至项目): github 地址：https://github.com/hongru/canvas2image 2.使用方法 123456789101112131415161718192021222324html2canvas(document.getElementById(\"view\"), &#123; // 这里是相应的配置，具体配置参考文档 useCORS: true // 是否支持跨域&#125;).then(canvas =&gt; &#123; // canvas参数即为canvas const img = Canvas2Image.convertToImage(canvas); // 下载，兼容性不好，只支持Chrome document.body.appendChild(img); var a = document.createElement(\"a\"); // 创建一个单击事件 var event = new MouseEvent(\"click\"); // 将a的download属性设置为想要下载的图片名称 a.download = \"截图\"; a.href = img.src; //将img的src值设置为a.href属性，img.src为base64编码值 // 触发a的单击事件 a.dispatchEvent(event); // width: 300, // height: 300,&#125;);","tags":[]},{"title":"移动端踩过的坑","date":"2019-06-19T10:29:31.000Z","path":"2019/06/19/移动端兼容/","text":"IOS new Date 中指定的字符串的格式为 new Date(“2018/04/27 11:11”)，其余格式需转化，例new Date(&quot;2018-04-27 11:11&quot;).replace(/-/g, &quot;/&quot;) Safari 浏览器中的弹性滑动属性-webkit-overflow-scrolling: touch 会导致 z-index 属性失效，解决的方法是通过设置transform: traslateZ(1px)，1px 中的 1 用来代表层级","tags":[]},{"title":"Hello World","date":"2019-06-19T09:06:08.969Z","path":"2019/06/19/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]