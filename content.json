[{"title":"margin折叠","date":"2019-07-12T02:48:33.000Z","path":"2019/07/12/margin折叠/","text":"什么是 margin 折叠在 CSS 中，两个或多个毗邻的普通流中的盒子（可能是父子元素，也可能是兄弟元素）在垂直方向上的外边距会发生叠加，这种形成的外边距称之为外边距叠加。 父子间： 兄弟间：、 什么时候发生 margin 折叠 没有被 padding、border、clear 和 line box 分隔开 属于同一个 BFC（块级格式化上下文 ） 垂直方向 属于普通流 如何形成一个 BFC1、float 的值不是 none。（float:left 或者 float:right） 2、position 的值不是 static 或者 relative。（position:absolute 或者 position:fixed） 3、display 的值是 inline-block、table-cell、flex、table-caption 或者 inline-flex 4、overflow 的值不是 visible（overflow:hidden、overflow:scroll） 5、父元素与正常文件流的子元素（非浮动子元素）自动形成一个 BFC 解决方案 父子间 父元素设置以下属性中的一种： 12345/* padding-top: 1px; *//* overflow: hidden; *//* border-top: 1px solid red; *//* display: inline-block; *//* display: table-cell; */ 兄弟间 推荐使用 padding 来代替 margin 使用 将兄弟元素分别作为子元素放在块级元素内，然后将其父级元素的渲染规则该为 BFC","tags":[]},{"title":"antd踩过的坑","date":"2019-07-02T03:40:55.000Z","path":"2019/07/02/antd踩过的坑/","text":"react antd 踩过的坑 Select,Cascader,Datepicker 的下拉框随着页面的滚动而滚动 原因：下拉框默认相对于页面 body 定位 解决方案：让下拉框相对于父级元素定位即可 Select,Cascader 1getPopupContainer=&#123;trigger =&gt; trigger.parentNode&#125; Datepicker 1getCalendarContainer=&#123;trigger =&gt; trigger.parentNode&#125;","tags":[]},{"title":"ts学习笔记","date":"2019-06-26T02:06:42.000Z","path":"2019/06/26/ts学习笔记/","text":"数据类型 类型推论。 1let myFavoriteNumber = \"seven\"; 等价于 1let myFavoriteNumber: string = \"seven\"; ts 会在没有明确的指定类型的时候推测出一个类型。但是，如果定义的时候没有赋值，不管之后 有没有赋值，都会被推断成 any 类型而完全不被类型检查。 12let myFavoriteNumber;myFavoriteNumber = \"seven\"; 等价于 12let myFavoriteNumber: any;myFavoriteNumber = \"seven\"; 接口（interface） 自定义属性 1234567891011interface Person &#123; name: string; age?: number; [x: string]: string;&#125;let tom: Person = &#123; name: \"Tom\", age: 25, gender: \"male\"&#125;; 一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集，上面代码中定义了任意属性，而 age 的值却是 number，number 不是 string 的子属性，所以编译会报错","tags":[]},{"title":"Hello World","date":"2019-06-20T06:16:15.656Z","path":"2019/06/20/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"电商流程","date":"2019-06-20T03:50:21.000Z","path":"2019/06/20/电商流程/","text":"一、普通订单状态 待付款 待发货 待收货 交易完成 交易关闭 注意： 功能条目中的内容只在订单详情页展示，列表页不展示。 按钮条目是有顺序的，若未特殊说明，从上到下依次对应 ui 中从右往左。 联系客服这个按钮不在按钮列表显示，统一加在订单详情页面内容中。 状态流转是指该状态之后一步的状态。 待付款 功能 支付倒计时（默认 30 分钟） 按钮 立即支付（高亮） 修改地址（根据产品需求添加） 取消订单 状态流转 交易关闭（取消订单后流转） 待发货（支付成功后流转） 详情展示内容 用户地址信息 各种商品信息（图片，名称，规格，单价，数量） 商品总金额 优惠金额 积分抵扣金额 运费 订单实付金额 订单编号 下单时间 备注 待发货 功能 无 按钮 批量退款（仅退款，点击后底部出个弹窗，弹窗内容为商品列表，用于勾选需要退款的商品，选完提交后跳转表单页面，在表单页面不显示选择退款的方式） 状态流转 待收货（商家发货后流转） 详情展示内容 用户地址信息 各种商品信息（图片，名称，规格，单价，数量） 商品总金额 优惠金额 积分抵扣金额 运费 订单实付金额 订单编号 下单时间 支付时间 支付方式（可无） 备注 待收货 功能 自动确认收货倒计时（默认自发货时间起 10 天）（如客户未要求，默认不需要） 按钮 确认收货（高亮） 批量退款（分仅退款和退款退货，点击后底部出个弹窗，弹窗内容为商品列表，用于勾选需要退款的商品，选完提交后跳转表单页面，在表单页面选择退款的方式） 查看物流 退款状态（该按钮只显示在各个商品上，并且该商品已申请退款，点击跳转对应的退款详情页）（状态有 审核中 / 待上传物流信息 / 退款成功 / 商家已驳回 / 已撤回） 状态流转 交易完成（确认收货后流转） 详情展示内容 用户地址信息 各种商品信息（图片，名称，规格，单价，数量） 商品总金额 优惠金额 积分抵扣金额 运费 订单实付金额 订单编号 下单时间 支付时间 支付方式（可无） 发货时间 备注 交易完成 功能 无 按钮 立即评价（高亮）（根据产品需求是否展示） 查看物流 批量退款（分仅退款和退款退货，点击后底部出个弹窗，弹窗内容为商品列表，用于勾选需要退款的商品，选完提交后跳转表单页面，在表单页面选择退款的方式） 退款状态（该按钮只显示在各个商品上，并且该商品已申请退款，点击跳转对应的退款详情页）（状态有 审核中 / 待上传物流信息 / 退款成功 / 商家已驳回 / 已撤回） 状态流转 无 详情展示内容 用户地址信息 各种商品信息（图片，名称，规格，单价，数量） 商品总金额 优惠金额 积分抵扣金额 运费 订单实付金额 订单编号 下单时间 支付时间 支付方式（可无） 发货时间 收货时间 备注 交易关闭 功能 无 按钮 无 状态流转 无 详情展示内容 用户地址信息 各种商品信息（图片，名称，规格，单价，数量） 商品总金额 优惠金额 积分抵扣金额 运费 订单实付金额 订单编号 下单时间 备注 以下由上一状态决定是否显示 支付时间 支付方式（可无） 发货时间 收货时间 二、退款订单状态（仅退款和退款退货） 审核中（审核中有 2 种情况，第一种是用户提交申请后，第二种是用户上传物流信息后） 待上传物流信息(退款退货下显示，仅退款不显示) 退款成功 商家已驳回(商家可以在任意阶段驳回用户的申请) 已撤回 注意： 联系客服这个按钮不在按钮列表显示，统一加在退款详情页面内容中。 商家收到用户退货商品后，如要驳回，需自行联系用户，告知其退还货物订单号，前台页面不再展示相关订单信息。 订单列表需展示退款类型（退款退货/仅退款） 审核中 功能 无 按钮 撤回申请 状态流转 待上传物流信息（用户提交退款申请后流转） 退款成功（商家退款后流转） 已驳回（商家驳回用户申请后流转） 已撤回（用户撤回申请后流转） 详情展示内容 退款商品信息（图片，名称，规格，单价，数量） 退款方式 退款金额 备注 退款单号 申请时间 待上传物流信息（退款退货显示） 功能 无 按钮 上传物流 撤回申请 状态流转 审核中（用户上传物流信息后流转） 已撤回（用户撤回申请后流转） 退款成功 功能 无 按钮 无 状态流转 无 商家已驳回 功能 无 按钮 无 状态流转 无 已撤回 功能 无 按钮 无 状态流转 无 流程图","tags":[]},{"title":"复制","date":"2019-06-20T01:53:03.000Z","path":"2019/06/20/复制/","text":"使用document.execCommand(&quot;Copy&quot;);来实现把复制的内容复制到粘贴板 思路 创建 input 框，value 值为需要复制的内容，设置readonly=”readonly”禁止唤起键盘 使用 getElementById 获取 input 框 调用.select()方法选中 input 框的内容 最后调用 document.execCommand(“Copy”) 实现复制 具体代码html:&lt;input value=&quot;copy的内容&quot; id=&quot;copy&quot; readonly=&quot;readonly&quot; /&gt; js: 1234const urlLink = document.getElementById(\"copy\");urlLink.select();document.execCommand(\"copy\");message.success(\"分享链接已复制成功！\", 1); 遇到的问题及解决方案 如果不想显示input框，可以将input框的opacity属性设置为0，在使用绝对定位使其脱离文档流。注意，不能将input框的display属性设置为none或将visibility设置为hidden或设置disabled，这会导致复制失败 ie之外的浏览器 document.execCommand(“copy”);这个必须在由用户操作触发的点击事件线程中执行，在axios异步的回调函数中执行是不允许的。解决的方案是使用async和await，将异步的操作变为同步即可","tags":[]},{"title":"下载文件到本地","date":"2019-06-19T10:29:31.000Z","path":"2019/06/19/下载文件/","text":"一、HTML5 原生 download 属性实现方法：&lt;a href=&quot;large.jpg&quot; download&gt;下载&lt;/a&gt;缺点： 兼容差，目前只兼容了 Chrome 文件需要是同源的，跨域资源会使 download 属性失效 二、使用 Blob 实现文件下载接口请求设置responseType: blob来使得返参为 blob 类型实现方法： 123456789101112download = (content, filename) =&gt; &#123; const eleLink = document.createElement(\"a\"); eleLink.download = filename; // 文件名 eleLink.style.display = \"none\"; var blob = new Blob([content]); // Blob二进制转换 eleLink.href = URL.createObjectURL(blob); // 二进制路径转换 // 触发点击 document.body.appendChild(eleLink); eleLink.click(); // 然后移除 document.body.removeChild(eleLink);&#125;; 三、生成截图并保存1.主要使用 html2canvas 库和 canvas2img 库。html2canvas(可通过 npm 安装): 文档地址：http://html2canvas.hertzen.com/ github 地址：https://github.com/niklasvh/html2canvas canvas2img(直接 copy 源码至项目): github 地址：https://github.com/hongru/canvas2image 2.使用方法 123456789101112131415161718192021222324html2canvas(document.getElementById(\"view\"), &#123; // 这里是相应的配置，具体配置参考文档 useCORS: true // 是否支持跨域&#125;).then(canvas =&gt; &#123; // canvas参数即为canvas const img = Canvas2Image.convertToImage(canvas); // 下载，兼容性不好，只支持Chrome document.body.appendChild(img); var a = document.createElement(\"a\"); // 创建一个单击事件 var event = new MouseEvent(\"click\"); // 将a的download属性设置为想要下载的图片名称 a.download = \"截图\"; a.href = img.src; //将img的src值设置为a.href属性，img.src为base64编码值 // 触发a的单击事件 a.dispatchEvent(event); // width: 300, // height: 300,&#125;); 注意：如果出现截图不完整，偏移等情况，可设置 setTimeout 解决","tags":[]},{"title":"移动端踩过的坑","date":"2019-06-19T10:29:31.000Z","path":"2019/06/19/移动端兼容/","text":"IOS new Date 中指定的字符串的格式为 new Date(“2018/04/27 11:11”)，其余格式需转化，例new Date(&quot;2018-04-27 11:11&quot;).replace(/-/g, &quot;/&quot;) Safari 浏览器中的弹性滑动属性-webkit-overflow-scrolling: touch 会导致 z-index 属性失效，解决的方法是通过设置transform: traslateZ(1px)，1px 中的 1 用来代表层级","tags":[]}]